from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout, 
                          QLabel, QLineEdit, QTextEdit, QComboBox, QPushButton, 
                          QFileDialog, QMessageBox, QGroupBox, QWidget)
from PyQt6.QtGui import QFont, QPixmap, QTextCursor
from PyQt6.QtCore import Qt
from datetime import datetime
import os
import shutil
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from BLL.BLLQuanLyDanhSachPhatHeThong import BLLQuanLyDanhSachPhatHeThong

class GUIThemDanhSachPhatHeThong(QDialog):
    def __init__(self, parent=None, danh_sach=None):
        super().__init__(parent)
        self.danh_sach = danh_sach
        self.setWindowTitle("üéµ Th√™m Danh S√°ch Ph√°t H·ªá Th·ªëng")
        self.setFixedSize(800, 950)  # TƒÉng k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        self.image_path = None
        self.bll = BLLQuanLyDanhSachPhatHeThong()
        self.ds_tieu_de = []
        
        self.xu_ly_tieu_de()
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        
        # Th√™m ti√™u ƒë·ªÅ ch√≠nh
        self.add_main_title(main_layout)
        
        # Form layout cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        form_layout = QFormLayout()
        form_layout.setVerticalSpacing(15)
        form_layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)
        
        # T·∫°o c√°c tr∆∞·ªùng
        self.create_id_field(form_layout)
        self.create_title_field(form_layout)
        self.create_desc_field(form_layout)
        self.create_status_field(form_layout)
        self.create_date_field(form_layout)
        
        # Layout cho ph·∫ßn ch·ªçn ·∫£nh
        self.create_image_selection(form_layout)
        
        # Th√™m form v√†o layout ch√≠nh
        main_layout.addLayout(form_layout)
        
        # Th√™m c√°c n√∫t
        button_layout = QHBoxLayout()
        self.create_buttons(button_layout)
        main_layout.addLayout(button_layout)
        
        self.setLayout(main_layout)
    
    def xu_ly_tieu_de(self):
        if not self.danh_sach:
            return
        try:
            for ds in self.danh_sach:
                self.ds_tieu_de.append(ds.TieuDe)
                
            print(f"ƒê√£ t·∫£i {len(self.ds_tieu_de)} ti√™u ƒë·ªÅ danh s√°ch ph√°t")
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω ti√™u ƒë·ªÅ: {str(e)}")
            import traceback
            traceback.print_exc()
        
    def add_main_title(self, layout):
        """Th√™m ti√™u ƒë·ªÅ ch√≠nh cho form"""
        # Container cho ti√™u ƒë·ªÅ
        title_container = QWidget()
        title_container.setStyleSheet("background-color: #2196F3; border-radius: 8px;")
        title_layout = QVBoxLayout(title_container)
        title_layout.setContentsMargins(15, 15, 15, 15)
        
        # Ti√™u ƒë·ªÅ ch√≠nh
        main_title = QLabel("üéµ TH√äM DANH S√ÅCH PH√ÅT M·ªöI")
        main_title.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        main_title.setStyleSheet("color: white;")
        main_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # Ti√™u ƒë·ªÅ ph·ª•
        sub_title = QLabel("üìù Nh·∫≠p th√¥ng tin chi ti·∫øt v·ªÅ danh s√°ch ph√°t h·ªá th·ªëng m·ªõi")
        sub_title.setFont(QFont("Arial", 13))
        sub_title.setStyleSheet("color: rgba(255, 255, 255, 0.9);")
        sub_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        title_layout.addWidget(main_title)
        title_layout.addWidget(sub_title)
        
        # Th√™m v√†o layout ch√≠nh v·ªõi margin
        layout.addWidget(title_container)
        
        # Th√™m kho·∫£ng c√°ch sau ti√™u ƒë·ªÅ
        spacer = QWidget()
        spacer.setFixedHeight(10)
        layout.addWidget(spacer)
    
    def create_id_field(self, form_layout):
        """T·∫°o tr∆∞·ªùng m√£ danh s√°ch (ch·ªâ ƒë·ªçc)"""
        id_label = QLabel("üÜî M√£ danh s√°ch:")
        id_label.setFont(QFont("Arial", 13))
        
        self.id_field = QLineEdit()
        self.id_field.setReadOnly(True)
        self.id_field.setStyleSheet("""
            QLineEdit {
                background-color: #f5f5f5;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 13pt;
            }
        """)
        
        form_layout.addRow(id_label, self.id_field)
        
        try:
            self.id_field.setText("{}".format(self.bll.lay_id_danh_sach_phat_moi()))
        except Exception as e:
            print(f"L·ªói khi l·∫•y ID danh s√°ch ph√°t m·ªõi: {str(e)}")
            self.id_field.setText("Auto")
            
    def create_title_field(self, form_layout):
        """T·∫°o tr∆∞·ªùng ti√™u ƒë·ªÅ"""
        title_label = QLabel("üè∑Ô∏è Ti√™u ƒë·ªÅ:")
        title_label.setFont(QFont("Arial", 13))
        
        self.title_field = QLineEdit()
        self.title_field.setPlaceholderText("Nh·∫≠p ti√™u ƒë·ªÅ danh s√°ch ph√°t")
        self.title_field.setMaxLength(255)
        self.title_field.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 13pt;
            }
            QLineEdit:focus {
                border: 1px solid #4CAF50;
            }
        """)
        
        form_layout.addRow(title_label, self.title_field)
    
    def create_desc_field(self, form_layout):
        """T·∫°o tr∆∞·ªùng m√¥ t·∫£"""
        desc_label = QLabel("üìù M√¥ t·∫£:")
        desc_label.setFont(QFont("Arial", 13))
        
        self.desc_field = QTextEdit()
        self.desc_field.setPlaceholderText("Nh·∫≠p m√¥ t·∫£ cho danh s√°ch ph√°t")
        self.desc_field.setStyleSheet("""
            QTextEdit {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 13pt;
            }
            QTextEdit:focus {
                border: 1px solid #4CAF50;
            }
        """)
        self.desc_field.setFixedHeight(100)  
        
        # Gi·ªõi h·∫°n s·ªë k√Ω t·ª±
        self.char_count_label = QLabel("0/255 k√Ω t·ª±")
        self.char_count_label.setStyleSheet("color: #888; font-size: 10pt;")
        self.desc_field.textChanged.connect(self.check_desc_length)
        
        # Container cho m√¥ t·∫£ v√† ƒë·∫øm k√Ω t·ª±
        desc_container = QVBoxLayout()
        desc_container.addWidget(self.desc_field)
        desc_container.addWidget(self.char_count_label, alignment=Qt.AlignmentFlag.AlignRight)
        
        # T·∫°o widget container
        container_widget = QWidget()
        container_widget.setLayout(desc_container)
        
        form_layout.addRow(desc_label, container_widget)
    
    def check_desc_length(self):
        """Ki·ªÉm tra v√† gi·ªõi h·∫°n ƒë·ªô d√†i c·ªßa tr∆∞·ªùng m√¥ t·∫£"""
        text = self.desc_field.toPlainText()
        length = len(text)
        
        # C·∫≠p nh·∫≠t nh√£n ƒë·∫øm k√Ω t·ª±
        if length <= 255:
            self.char_count_label.setText(f"{length}/255 k√Ω t·ª±")
            self.char_count_label.setStyleSheet("color: #888; font-size: 10pt;")
        else:
            # N·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n, hi·ªÉn th·ªã m√†u ƒë·ªè
            self.char_count_label.setText(f"{length}/255 k√Ω t·ª± - T·ªëi ƒëa 255 k√≠ t·ª±!")
            self.char_count_label.setStyleSheet("color: red; font-size: 10pt;")
            
            # C·∫Øt b·ªõt vƒÉn b·∫£n xu·ªëng 255 k√Ω t·ª±
            truncated_text = text[:255]
            
            # NgƒÉn ƒë·ªá quy b·∫±ng c√°ch ng·∫Øt k·∫øt n·ªëi v√† k·∫øt n·ªëi l·∫°i
            self.desc_field.textChanged.disconnect(self.check_desc_length)
            self.desc_field.setPlainText(truncated_text)
            self.desc_field.textChanged.connect(self.check_desc_length)
            
            # ƒê·∫∑t con tr·ªè ·ªü cu·ªëi vƒÉn b·∫£n
            cursor = self.desc_field.textCursor()
            cursor.movePosition(QTextCursor.MoveOperation.End)
            self.desc_field.setTextCursor(cursor)
    
    def create_status_field(self, form_layout):
        """T·∫°o tr∆∞·ªùng tr·∫°ng th√°i (combobox)"""
        status_label = QLabel("üëÅÔ∏è Tr·∫°ng th√°i:")
        status_label.setFont(QFont("Arial", 13))
        
        self.status_field = QComboBox()
        self.status_field.addItem("Hi·ªÉn th·ªã", True)
        self.status_field.addItem("·∫®n", False)
        self.status_field.setStyleSheet("""
            QComboBox {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 13pt;
                min-width: 150px;
            }
        """)
        
        form_layout.addRow(status_label, self.status_field)
    
    def create_date_field(self, form_layout):
        """T·∫°o tr∆∞·ªùng ng√†y t·∫°o (ch·ªâ ƒë·ªçc)"""
        date_label = QLabel("üìÖ Ng√†y t·∫°o:")
        date_label.setFont(QFont("Arial", 13))
        
        self.date_field = QLineEdit()
        self.date_field.setReadOnly(True)
        current_date = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        self.date_field.setText(current_date)
        self.date_field.setStyleSheet("""
            QLineEdit {
                background-color: #f5f5f5;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 13pt;
            }
        """)
        
        form_layout.addRow(date_label, self.date_field)
    
    def create_image_selection(self, form_layout):
        """T·∫°o ph·∫ßn ch·ªçn ·∫£nh"""
        image_label = QLabel("üñºÔ∏è ·∫¢nh:")
        image_label.setFont(QFont("Arial", 13))
        
        # Container cho ·∫£nh
        image_container = QWidget()
        container_layout = QVBoxLayout(image_container)
        container_layout.setContentsMargins(0, 0, 0, 0)
        
        # Ti√™u ƒë·ªÅ ph·ª• cho ph·∫ßn ·∫£nh
        image_title = QLabel("üé® Ch·ªçn ·∫£nh ƒë·∫°i di·ªán cho danh s√°ch ph√°t")
        image_title.setStyleSheet("color: #555; font-size: 10pt;")
        container_layout.addWidget(image_title, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # Preview ·∫£nh
        self.image_preview = QLabel()
        self.image_preview.setFixedSize(200, 200)  # TƒÉng k√≠ch th∆∞·ªõc ph·∫ßn hi·ªÉn th·ªã ·∫£nh
        self.image_preview.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.image_preview.setStyleSheet("""
            border: 2px dashed #ccc; 
            background-color: #f9f9f9;
            border-radius: 5px;
        """)
        self.image_preview.setText("Ch∆∞a c√≥ ·∫£nh")
        
        # N√∫t ch·ªçn ·∫£nh
        self.choose_image_btn = QPushButton("üì∑ Ch·ªçn ·∫£nh")
        self.choose_image_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 13pt;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        self.choose_image_btn.clicked.connect(self.choose_image)
        
        container_layout.addWidget(self.image_preview, alignment=Qt.AlignmentFlag.AlignCenter)
        container_layout.addWidget(self.choose_image_btn, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # Ghi ch√∫ v·ªÅ ·∫£nh
        image_note = QLabel("üìå ƒê·ªãnh d·∫°ng h·ªó tr·ª£: PNG, JPG, JPEG, BMP")
        image_note.setStyleSheet("color: #888; font-size: 9pt; font-style: italic;")
        container_layout.addWidget(image_note, alignment=Qt.AlignmentFlag.AlignCenter)
        
        form_layout.addRow(image_label, image_container)
    
    def choose_image(self):
        """M·ªü h·ªôp tho·∫°i ch·ªçn ·∫£nh"""
        file_dialog = QFileDialog(self)
        file_dialog.setWindowTitle("Ch·ªçn ·∫£nh cho danh s√°ch ph√°t")
        file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
        file_dialog.setNameFilter("·∫¢nh (*.png *.jpg *.jpeg *.bmp)")
        
        if file_dialog.exec() == QDialog.DialogCode.Accepted:
            selected_file = file_dialog.selectedFiles()[0]
            self.image_path = selected_file
            
            # Hi·ªÉn th·ªã ·∫£nh xem tr∆∞·ªõc
            pixmap = QPixmap(selected_file)
            if not pixmap.isNull():
                pixmap = pixmap.scaled(190, 190, Qt.AspectRatioMode.KeepAspectRatio)
                self.image_preview.setPixmap(pixmap)
                self.image_preview.setText("")
            else:
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i ·∫£nh ƒë√£ ch·ªçn!")
    
    def create_buttons(self, layout):
        """T·∫°o c√°c n√∫t ·ªü d∆∞·ªõi c√πng"""
        # N√∫t h·ªßy
        self.cancel_btn = QPushButton("‚ùå H·ªßy")
        self.cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-size: 12pt;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        self.cancel_btn.clicked.connect(self.reject)
        
        # N√∫t l∆∞u
        self.save_btn = QPushButton("üíæ L∆∞u")
        self.save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-size: 12pt;
            }
            QPushButton:hover {
                background-color: #388E3C;
            }
        """)
        self.save_btn.clicked.connect(self.save_data)
        
        # Th√™m n√∫t v√†o layout
        layout.addStretch()
        layout.addWidget(self.cancel_btn)
        layout.addWidget(self.save_btn)
    
    def save_data(self):
        # Validate d·ªØ li·ªáu
        if not self.validate_data():
            return
        
        # L·∫•y d·ªØ li·ªáu t·ª´ form
        title = self.title_field.text().strip()
        desc = self.desc_field.toPlainText().strip()
        status = self.status_field.currentData()  # True/False
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu - ch∆∞a c√≥ ·∫£nh
        data = {
            "TieuDe": title,
            "MoTa": desc,
            "TrangThai": status,
            "Anh": None,
            "NgayTao": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
        
        try:
            # Th√™m danh s√°ch ph√°t tr∆∞·ªõc ƒë·ªÉ l·∫•y ID
            new_id = self.bll.them_danh_sach_phat(data)
            
            if not new_id:
                QMessageBox.warning(self, "Th·∫•t b·∫°i", "Kh√¥ng th·ªÉ th√™m danh s√°ch ph√°t. Vui l√≤ng th·ª≠ l·∫°i!")
                return
                
            # X·ª≠ l√Ω v√† l∆∞u ·∫£nh v·ªõi ID m·ªõi
            image_path_to_save = None
            if self.image_path:
                try:
                    image_path_to_save = self.save_image(new_id)
                    
                    # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o b·∫£n ghi ƒë√£ t·∫°o
                    if image_path_to_save:
                        update_result = self.bll.cap_nhat_anh_danh_sach_phat(new_id, image_path_to_save)
                        if not update_result:
                            print(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh cho danh s√°ch ph√°t ID {new_id}")
                except Exception as e:
                    print(f"L·ªói khi l∆∞u ·∫£nh: {str(e)}")
                    # V·∫´n cho ph√©p ti·∫øp t·ª•c n·∫øu ·∫£nh l·ªói
            
            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m danh s√°ch ph√°t m·ªõi v·ªõi ID: {new_id}!")
            self.accept()  # ƒê√≥ng dialog v·ªõi k·∫øt qu·∫£ Accepted
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi l∆∞u danh s√°ch ph√°t: {str(e)}")
    
    def validate_data(self):
        # Ki·ªÉm tra ti√™u ƒë·ªÅ
        title = self.title_field.text().strip()
        if not title:
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ cho danh s√°ch ph√°t!")
            self.title_field.setFocus()
            return False
        
        # Ki·ªÉm tra tr√πng ti√™u ƒë·ªÅ - c√°ch ki·ªÉm tra ti√™u ƒë·ªÅ c√≥ trong danh s√°ch hay kh√¥ng
        if title in self.ds_tieu_de:
            QMessageBox.warning(self, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", 
                            f"Ti√™u ƒë·ªÅ '{title}' ƒë√£ t·ªìn t·∫°i!\nVui l√≤ng ch·ªçn ti√™u ƒë·ªÅ kh√°c.")
            self.title_field.setFocus()
            return False
        
        # Ki·ªÉm tra ƒë·ªô d√†i m√¥ t·∫£
        desc_length = len(self.desc_field.toPlainText().strip())
        if desc_length > 255:
            QMessageBox.warning(self, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±!")
            self.desc_field.setFocus()
            return False
        
        return True
    
    def save_image(self, list_id=None):
        if not self.image_path:
            return None
        
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        valid_extensions = ['.png', '.jpg', '.jpeg', '.bmp']
        file_extension = os.path.splitext(self.image_path)[1].lower()
        
        if file_extension not in valid_extensions:
            raise ValueError(f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n: {', '.join(valid_extensions)}")
        
        # S·ª≠ d·ª•ng ID ƒë∆∞·ª£c truy·ªÅn v√†o ho·∫∑c l·∫•y t·ª´ field
        if list_id is None:
            try:
                list_id = self.id_field.text().strip()
                if not list_id or list_id == "Auto" or list_id == "T·ª± ƒë·ªông":
                    # S·ª≠ d·ª•ng timestamp n·∫øu kh√¥ng c√≥ ID
                    list_id = f"temp_{int(datetime.now().timestamp())}"
            except:
                list_id = f"temp_{int(datetime.now().timestamp())}"
        
        # Th∆∞ m·ª•c l∆∞u ·∫£nh
        destination_folder = "assets/DanhSachPhatHeThong"
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(destination_folder, exist_ok=True)
        
        # T·∫°o t√™n file m·ªõi d·ª±a tr√™n ID danh s√°ch
        new_filename = f"{list_id}{file_extension}"
        
        # ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß cho file m·ªõi
        destination_path = os.path.join(destination_folder, new_filename)
        
        # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
        if os.path.exists(destination_path):
            # N·∫øu ƒë√£ t·ªìn t·∫°i, x√≥a file c≈©
            try:
                os.remove(destination_path)
                print(f"ƒê√£ x√≥a file ·∫£nh c≈©: {destination_path}")
            except Exception as e:
                print(f"Kh√¥ng th·ªÉ x√≥a file ·∫£nh c≈©: {e}")
        
        # Copy file ·∫£nh m·ªõi
        shutil.copy2(self.image_path, destination_path)
        print(f"ƒê√£ l∆∞u ·∫£nh v·ªõi t√™n: {new_filename}")
        
        # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ l∆∞u v√†o DB
        return destination_path.replace("\\", "/")
    
if __name__ == "__main__":
    import sys
    from PyQt6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    window = GUIThemDanhSachPhatHeThong()
    window.show()
    
    sys.exit(app.exec())