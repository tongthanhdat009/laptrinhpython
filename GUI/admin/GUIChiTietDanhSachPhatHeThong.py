import sys
import os

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                             QTableWidget, QTableWidgetItem, QLabel, QLineEdit,
                             QHeaderView, QFrame, QDialog, QMessageBox)
from PyQt6.QtGui import QFont, QPixmap
from PyQt6.QtCore import Qt
from datetime import datetime, date
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from BLL.BLLQuanLyDanhSachPhatHeThong import BLLQuanLyDanhSachPhatHeThong
from GUI.admin.GUIThemBaiHatDSPHT import GUIThemBaiHatDSPHT
from GUI.admin.GUIChinhSuaDanhSachPhatHeThong import GUIChinhSuaDanhSachPhatHeThong
class GUIChiTietDanhSachPhatHeThong(QDialog):
    def __init__(self, ma_danh_sach:int):
        super().__init__()
        self.ma_danh_sach = ma_danh_sach
        self.bll = BLLQuanLyDanhSachPhatHeThong()
        self.danh_sach = self.bll.lay_danh_sach_phat_he_thong_theo_ma(ma_danh_sach)
        self.danh_sach_nhac = self.bll.lay_danh_sach_bai_hat_theo_ma_danh_sach(ma_danh_sach)
        self.setWindowTitle("Chi Ti·∫øt Danh S√°ch Ph√°t")
        self.setFixedSize(1000, 600)
        self.setUpUI()
        
    def setUpUI(self):
        # Layout ch√≠nh
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Ti√™u ƒë·ªÅ v·ªõi ·∫£nh v√† th√¥ng tin
        title_widget = QWidget()
        title_layout = QHBoxLayout(title_widget)
        title_layout.setContentsMargins(0, 0, 0, 20)

        # ·∫¢nh danh s√°ch ph√°t (b√™n tr√°i)
        self.image_label = QLabel()
        self.image_label.setFixedSize(120, 120)
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # T·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n c·ªßa danh s√°ch
        # S·ª≠ d·ª•ng h√†m trong UI
        self.image_label = QLabel()
        self.image_label.setFixedSize(120, 120)
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        pixmap = self._load_image(self.danh_sach.Anh)
        if pixmap:
            self.image_label.setPixmap(pixmap)
        else:
            self.image_label.setText("No Image")
            self.image_label.setStyleSheet("background-color: #f0f0f0; border-radius: 10px;")

        # Container cho ti√™u ƒë·ªÅ v√† m√¥ t·∫£ (b√™n ph·∫£i)
        info_container = QWidget()
        info_layout = QVBoxLayout(info_container)
        info_layout.setContentsMargins(20, 0, 0, 0)
        info_layout.setSpacing(5)

        # Ti√™u ƒë·ªÅ danh s√°ch ph√°t
        self.title_label = QLabel(self.danh_sach.TieuDe)
        self.title_label.setFont(QFont("Arial", 24, QFont.Weight.Bold))
        self.title_label.setStyleSheet("color: #2196F3;")

        # M√¥ t·∫£ danh s√°ch ph√°t
        self.desc_label = QLabel(self.danh_sach.MoTa)
        self.desc_label.setFont(QFont("Arial", 14))
        self.desc_label.setStyleSheet("color: #757575;")
        self.desc_label.setWordWrap(True)

        # Th√™m ti√™u ƒë·ªÅ v√† m√¥ t·∫£ v√†o container
        info_layout.addWidget(self.title_label)
        info_layout.addWidget(self.desc_label)
        info_layout.addStretch()

        # Th√™m ·∫£nh v√† th√¥ng tin v√†o layout ti√™u ƒë·ªÅ
        title_layout.addWidget(self.image_label)
        title_layout.addWidget(info_container, 1)  # S·ªë 1 ƒë·ªÉ info_container c√≥ th·ªÉ m·ªü r·ªông

        # ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch d∆∞·ªõi ti√™u ƒë·ªÅ
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setStyleSheet("background-color: #e0e0e0; min-height: 1px;")

        # Th√™m widget ti√™u ƒë·ªÅ v√† ƒë∆∞·ªùng k·∫ª v√†o layout ch√≠nh
        main_layout.addWidget(title_widget)
        main_layout.addWidget(separator)
        
        # Layout thanh t√¨m ki·∫øm v√† n√∫t th√™m
        search_layout = QHBoxLayout()
        
        # Thanh t√¨m ki·∫øm
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("T√¨m ki·∫øm b√†i h√°t...")
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 4px;
                font-size: 14px;
            }
        """)
        
        # N√∫t t√¨m ki·∫øm
        search_button = QPushButton("üîçT√¨m Ki·∫øm")
        search_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        search_button.clicked.connect(self.tim_kiem_bai_hat)
        
        # N√∫t th√™m b√†i h√°t
        add_button = QPushButton("‚ûïTh√™m B√†i H√°t")
        add_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #388E3C;
            }
        """)
        add_button.clicked.connect(self.them_bai_hat)
        
        # n√∫t s·ª≠a th√¥ng tin danh s√°ch
        edit_button = QPushButton("üìùS·ª≠a")
        edit_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;  
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #1976D2;  
            }
        """)     
        edit_button.clicked.connect(self.sua_danh_sach)
        
        # n√∫t refresh
        refresh_button = QPushButton("üîÑRefresh")
        refresh_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;  
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #1976D2;  
            }
        """)           
        
        refresh_button.clicked.connect(self.lam_moi_danh_sach)
        
        search_layout.addWidget(self.search_input, 7)
        search_layout.addWidget(search_button, 1)
        search_layout.addWidget(add_button, 2)
        search_layout.addWidget(edit_button, 1)
        search_layout.addWidget(refresh_button, 1)
        main_layout.addLayout(search_layout)
        
        # B·∫£ng hi·ªÉn th·ªã danh s√°ch b√†i h√°t
        self.table = QTableWidget()
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["ID", "·∫¢nh", "T√™n B√†i H√°t", "Ca Sƒ©", "X√≥a"])
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
                gridline-color: #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 8px;
                font-size: 14px;
                font-weight: bold;
                border: 1px solid #ddd;
            }
            QTableWidget::item {
                padding: 8px;
            }
        """)
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        self.table.setColumnWidth(0, 80)  # ID
        self.table.setColumnWidth(1, 120)  # ·∫¢nh
        self.table.setColumnWidth(4, 100)  # X√≥a
        
        # C√°c c·ªôt c√≤n l·∫°i m·ªü r·ªông t·ª± ƒë·ªông
        self.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)  # T√™n b√†i h√°t
        self.table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)  # Ca sƒ©
        
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(125)
        
        main_layout.addWidget(self.table)
        
        # Button Layout (ƒê√≥ng, L∆∞u thay ƒë·ªïi, v.v.)
        button_layout = QHBoxLayout()
        
        close_button = QPushButton("ƒê√≥ng")
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        close_button.clicked.connect(self.close)
        
        button_layout.addStretch()
        button_layout.addWidget(close_button)
        
        main_layout.addLayout(button_layout)
        
        self.setLayout(main_layout)
        
        # Load d·ªØ li·ªáu
        self.load_danh_sach_bai_hat()
        
    def load_danh_sach_bai_hat(self):
        # ƒê·∫∑t s·ªë d√≤ng b·∫£ng b·∫±ng 0 tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        self.table.setRowCount(0)
        
        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, d·ª´ng l·∫°i
        if not self.danh_sach_nhac:
            return
        
        # Thi·∫øt l·∫≠p s·ªë d√≤ng
        self.table.setRowCount(len(self.danh_sach_nhac))
        
        # T·∫£i d·ªØ li·ªáu v√†o t·ª´ng d√≤ng
        for row, bai_hat in enumerate(self.danh_sach_nhac):
            # ID
            id_item = QTableWidgetItem(str(f'#{bai_hat.getMaBaiHat()}'))
            id_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            font = QFont()
            font.setPointSize(14)
            font.setBold(True)
            id_item.setFont(font)
            self.table.setItem(row, 0, id_item)
            
            # ·∫¢nh
            label = QLabel()
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            # X·ª≠ l√Ω ·∫£nh
            anh_path = bai_hat.getAnh()
            if anh_path != None:
                image_path = anh_path.replace("/", "\\")
                print(f"ƒêang t·∫£i ·∫£nh t·ª´: {image_path}")
                
                if image_path.startswith("\\") or image_path.startswith("..") or image_path.startswith(".\\") or image_path.startswith("./"):
                    current_dir = os.path.dirname(os.path.abspath(__file__))
                    project_root = os.path.dirname(os.path.dirname(current_dir))
                    
                    if image_path.startswith("\\"):
                        image_path = image_path[1:]  
                        image_path = os.path.normpath(os.path.join(project_root, image_path))
                    else:
                        image_path = os.path.normpath(os.path.join(current_dir, image_path))
                    print(f"ƒê∆∞·ªùng d·∫´n ƒë√£ x·ª≠ l√Ω: {image_path}")
                    pixmap = QPixmap(image_path)
                    label.setPixmap(pixmap.scaled(120, 120, Qt.AspectRatioMode.KeepAspectRatio))
                    if pixmap.isNull():
                        print(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n: {image_path}")
                        self._them_anh_mac_dinh(label)
            else:
                self._them_anh_mac_dinh(label)
                
            self.table.setCellWidget(row, 1, label)
            
            # T√™n b√†i h√°t
            ten_item = QTableWidgetItem(bai_hat.getTieuDe())
            ten_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            ten_item.setFont(QFont("Arial", 10))
            self.table.setItem(row, 2, ten_item)
            
            # Ca sƒ© - h·ª£p nh·∫•t danh s√°ch ca sƒ© th√†nh chu·ªói
            ca_si_names = []
            if bai_hat.getCaSi():
                for ca_si in bai_hat.getCaSi():
                    if isinstance(ca_si, dict) and "TenCaSi" in ca_si:
                        ca_si_names.append(ca_si["TenCaSi"])
                    elif hasattr(ca_si, "TenCaSi"):
                        ca_si_names.append(ca_si.TenCaSi)
            
            ca_si_text = ", ".join(ca_si_names) if ca_si_names else "Kh√¥ng c√≥ th√¥ng tin"
            ca_si_item = QTableWidgetItem(ca_si_text)
            ca_si_item.setTextAlignment(Qt.AlignmentFlag.AlignVCenter | Qt.AlignmentFlag.AlignLeft)
            ca_si_item.setFont(QFont("Arial", 10))
            self.table.setItem(row, 3, ca_si_item)
            
            # N√∫t x√≥a
            btn_xoa = QPushButton("üóëÔ∏èX√≥a")
            btn_xoa.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    padding: 5px;
                    border-radius: 3px;
                }
                QPushButton:hover {
                    background-color: #d32f2f;
                }
            """)
            btn_xoa.clicked.connect(lambda _, id=bai_hat.getMaBaiHat(): self.xoa_bai_hat(id))
            self.table.setCellWidget(row, 4, btn_xoa)

    def _them_anh_mac_dinh(self, label):
        """Th√™m ·∫£nh m·∫∑c ƒë·ªãnh v√†o label"""
        default_image = r"assets\AnhBaiHat\0.png"
        print(f"S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh: {default_image}")
        pixmap = QPixmap(default_image)
        
        if pixmap.isNull():
            print(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh m·∫∑c ƒë·ªãnh")
            label.setText("No Image")
        else:
            pixmap = pixmap.scaled(80, 80, Qt.AspectRatioMode.KeepAspectRatio)
            label.setPixmap(pixmap)
    
    def tim_kiem_bai_hat(self):
        search_text = self.search_input.text().strip().lower()
        search_type = self.search_type.currentText() if hasattr(self, 'search_type') else "T·∫•t c·∫£"
        
        # ƒê·∫∑t l·∫°i th√¥ng b√°o tr·∫°ng th√°i
        if hasattr(self, 'status_label'):
            self.status_label.clear()
        
        if not search_text:
            # N·∫øu √¥ t√¨m ki·∫øm tr·ªëng, hi·ªÉn th·ªã l·∫°i to√†n b·ªô danh s√°ch
            self.load_danh_sach_bai_hat()
            if hasattr(self, 'status_label'):
                self.status_label.setText(f"Hi·ªÉn th·ªã t·∫•t c·∫£ {len(self.danh_sach_nhac)} b√†i h√°t trong danh s√°ch")
            return
        
        # X√≥a n·ªôi dung b·∫£ng hi·ªán t·∫°i
        self.table.setRowCount(0)
        
        # L·ªçc danh s√°ch b√†i h√°t theo t·ª´ kh√≥a v√† lo·∫°i t√¨m ki·∫øm
        bai_hat_tim_thay = []
        
        for bai_hat in self.danh_sach_nhac:
            # T√¨m ki·∫øm trong t√™n b√†i h√°t
            ten_bai_hat = bai_hat.getTieuDe().lower()
            
            # T√¨m ki·∫øm trong t√™n ca sƒ©
            ca_si_names = []
            if bai_hat.getCaSi():
                for ca_si in bai_hat.getCaSi():
                    if isinstance(ca_si, dict) and "TenCaSi" in ca_si:
                        ca_si_names.append(ca_si["TenCaSi"].lower())
                    elif hasattr(ca_si, "TenCaSi"):
                        ca_si_names.append(ca_si.TenCaSi.lower())
            
            ca_si_text = " ".join(ca_si_names).lower()
            
            # Ki·ªÉm tra theo lo·∫°i t√¨m ki·∫øm
            if search_type == "T·∫•t c·∫£":
                if search_text in ten_bai_hat or search_text in ca_si_text:
                    bai_hat_tim_thay.append(bai_hat)
            elif search_type == "T√™n b√†i h√°t":
                if search_text in ten_bai_hat:
                    bai_hat_tim_thay.append(bai_hat)
            elif search_type == "Ca sƒ©":
                if search_text in ca_si_text:
                    bai_hat_tim_thay.append(bai_hat)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
        if bai_hat_tim_thay:
            # Thi·∫øt l·∫≠p s·ªë d√≤ng cho b·∫£ng
            self.table.setRowCount(len(bai_hat_tim_thay))
            
            # Hi·ªÉn th·ªã c√°c b√†i h√°t ƒë√£ t√¨m th·∫•y
            for row, bai_hat in enumerate(bai_hat_tim_thay):
                # ID
                id_item = QTableWidgetItem(str(f'#{bai_hat.getMaBaiHat()}'))
                id_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                font = QFont()
                font.setPointSize(14)
                font.setBold(True)
                id_item.setFont(font)
                self.table.setItem(row, 0, id_item)
                
                # ·∫¢nh
                label = QLabel()
                label.setAlignment(Qt.AlignmentFlag.AlignCenter)
                
                # X·ª≠ l√Ω ·∫£nh
                anh_path = bai_hat.getAnh()
                if anh_path != None:
                    image_path = anh_path.replace("/", "\\")
                    
                    if image_path.startswith("\\") or image_path.startswith("..") or image_path.startswith(".\\") or image_path.startswith("./"):
                        current_dir = os.path.dirname(os.path.abspath(__file__))
                        project_root = os.path.dirname(os.path.dirname(current_dir))
                        
                        if image_path.startswith("\\"):
                            image_path = image_path[1:]  
                            image_path = os.path.normpath(os.path.join(project_root, image_path))
                        else:
                            image_path = os.path.normpath(os.path.join(current_dir, image_path))
                        
                        pixmap = QPixmap(image_path)
                        label.setPixmap(pixmap.scaled(120, 120, Qt.AspectRatioMode.KeepAspectRatio))
                        if pixmap.isNull():
                            self._them_anh_mac_dinh(label)
                else:
                    self._them_anh_mac_dinh(label)
                    
                self.table.setCellWidget(row, 1, label)
                
                # T√™n b√†i h√°t - ƒê√°nh d·∫•u t·ª´ kh√≥a t√¨m ki·∫øm
                ten_bai_hat = bai_hat.getTieuDe()
                ten_item = QTableWidgetItem(ten_bai_hat)
                ten_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                
                self.table.setItem(row, 2, ten_item)
                
                # Ca sƒ© - h·ª£p nh·∫•t danh s√°ch ca sƒ© th√†nh chu·ªói
                ca_si_names = []
                if bai_hat.getCaSi():
                    for ca_si in bai_hat.getCaSi():
                        if isinstance(ca_si, dict) and "TenCaSi" in ca_si:
                            ca_si_names.append(ca_si["TenCaSi"])
                        elif hasattr(ca_si, "TenCaSi"):
                            ca_si_names.append(ca_si.TenCaSi)
                
                ca_si_text = ", ".join(ca_si_names) if ca_si_names else "Kh√¥ng c√≥ th√¥ng tin"
                ca_si_item = QTableWidgetItem(ca_si_text)
                ca_si_item.setTextAlignment(Qt.AlignmentFlag.AlignVCenter | Qt.AlignmentFlag.AlignLeft)
                
                self.table.setItem(row, 3, ca_si_item)
                
                # N√∫t x√≥a
                btn_xoa = QPushButton("üóëÔ∏èX√≥a")
                btn_xoa.setStyleSheet("""
                    QPushButton {
                        background-color: #f44336;
                        color: white;
                        border: none;
                        padding: 5px;
                        border-radius: 3px;
                    }
                    QPushButton:hover {
                        background-color: #d32f2f;
                    }
                """)
                btn_xoa.clicked.connect(lambda _, id=bai_hat.getMaBaiHat(): self.xoa_bai_hat(id))
                self.table.setCellWidget(row, 4, btn_xoa)
            
            # C·∫≠p nh·∫≠t thanh tr·∫°ng th√°i
            if hasattr(self, 'status_label'):
                self.status_label.setText(f"T√¨m th·∫•y {len(bai_hat_tim_thay)}/{len(self.danh_sach_nhac)} b√†i h√°t ph√π h·ª£p v·ªõi t·ª´ kh√≥a '{search_text}'")
                self.status_label.setStyleSheet("""
                    QLabel {
                        background-color: #e3f2fd;
                        color: #1976D2;
                        padding: 8px;
                        border-radius: 4px;
                        font-size: 13px;
                        border: 1px solid #bbdefb;
                    }
                """)
            else:
                # Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£ t√¨m ki·∫øm b·∫±ng h·ªôp tho·∫°i
                QMessageBox.information(
                    self,
                    "K·∫øt qu·∫£ t√¨m ki·∫øm",
                    f"T√¨m th·∫•y {len(bai_hat_tim_thay)} b√†i h√°t ph√π h·ª£p v·ªõi t·ª´ kh√≥a '{search_text}'",
                    QMessageBox.StandardButton.Ok
                )
        else:
            # C·∫≠p nh·∫≠t thanh tr·∫°ng th√°i
            if hasattr(self, 'status_label'):
                self.status_label.setText(f"Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a '{search_text}'")
                self.status_label.setStyleSheet("""
                    QLabel {
                        background-color: #ffebee;
                        color: #c62828;
                        padding: 8px;
                        border-radius: 4px;
                        font-size: 13px;
                        border: 1px solid #ffcdd2;
                    }
                """)
            else:
                # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
                QMessageBox.information(
                    self,
                    "K·∫øt qu·∫£ t√¨m ki·∫øm",
                    f"Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a '{search_text}'",
                    QMessageBox.StandardButton.Ok
                )
            
            # Hi·ªÉn th·ªã l·∫°i to√†n b·ªô danh s√°ch
            self.load_danh_sach_bai_hat()
        
    def them_bai_hat(self):
        try:
            # T·∫°o dialog th√™m b√†i h√°t v√† truy·ªÅn self l√†m parent
            dialog = GUIThemBaiHatDSPHT(ma_danh_sach=self.ma_danh_sach, parent=self)
            
            # K·∫øt n·ªëi signal v·ªõi slot ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
            dialog.dataChanged.connect(self.load_danh_sach_bai_hat)
            
            # ƒê·∫∑t v·ªã tr√≠ trung t√¢m so v·ªõi c·ª≠a s·ªï cha
            self.centerChildDialog(dialog)
            
            # Hi·ªÉn th·ªã dialog
            result = dialog.exec()
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ n·∫øu c·∫ßn
            if result == QDialog.DialogCode.Accepted:
                # N·∫øu th√™m th√†nh c√¥ng, c·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu
                self.load_danh_sach_bai_hat()
        
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi m·ªü dialog th√™m b√†i h√°t: {str(e)}")
            print(f"L·ªói khi m·ªü dialog th√™m b√†i h√°t: {e}")
        
    def centerChildDialog(self, child_dialog):
        """ƒê·∫∑t dialog con ·ªü gi·ªØa dialog cha"""
        # L·∫•y k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ c·ªßa dialog cha
        parent_geom = self.geometry()
        parent_center = parent_geom.center()
        
        # L·∫•y k√≠ch th∆∞·ªõc c·ªßa dialog con
        child_size = child_dialog.sizeHint()
        
        # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ dialog con ·ªü gi·ªØa dialog cha
        child_x = parent_center.x() - child_size.width() // 2
        child_y = parent_center.y() - child_size.height() // 2
        
        # ƒê·∫∑t v·ªã tr√≠ cho dialog con
        child_dialog.setGeometry(child_x, child_y, child_size.width(), child_size.height())
    
    def lam_moi_danh_sach(self):
        self.table.clearContents()
        self.table.setRowCount(0)
        self.danh_sach_nhac = self.bll.lay_danh_sach_bai_hat_theo_ma_danh_sach(self.ma_danh_sach)
        self.load_danh_sach_bai_hat()
    
    def sua_danh_sach(self):
        try:
            # T·∫°o dialog ch·ªânh s·ª≠a v·ªõi m√£ danh s√°ch hi·ªán t·∫°i
            dialog = GUIChinhSuaDanhSachPhatHeThong(ma_danh_sach=self.ma_danh_sach, parent=self)
            
            # ƒê·∫∑t v·ªã tr√≠ trung t√¢m so v·ªõi c·ª≠a s·ªï cha
            self.centerChildDialog(dialog)
            
            # Hi·ªÉn th·ªã dialog d·∫°ng modal ƒë·ªÉ ch·∫∑n t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï ch√≠nh
            result = dialog.exec()
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ n·∫øu c·∫ßn
            if result == QDialog.DialogCode.Accepted:
                print("ƒê√£ ch·ªânh s·ª≠a danh s√°ch ph√°t th√†nh c√¥ng!")
                self.danh_sach = self.bll.lay_danh_sach_phat_he_thong_theo_ma(self.ma_danh_sach)
                self.desc_label.setText(self.danh_sach.MoTa)
                self.title_label.setText(self.danh_sach.TieuDe)
                pixmap = self._load_image(self.danh_sach.Anh)
                if pixmap:
                    self.image_label.setPixmap(pixmap)
                else:
                    self.image_label.setText("No Image")
                    self.image_label.setStyleSheet("background-color: #f0f0f0; border-radius: 10px;")
    
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi m·ªü dialog ch·ªânh s·ª≠a: {str(e)}")
            print(f"L·ªói khi m·ªü dialog ch·ªânh s·ª≠a: {e}")
            
    def xoa_bai_hat(self, id_bai_hat):
        # X√°c nh·∫≠n v√† x√≥a b√†i h√°t
        print(f"X√≥a b√†i h√°t c√≥ ID: {id_bai_hat}")
        
        # T√¨m th√¥ng tin b√†i h√°t
        ten_bai_hat = ""
        anh_bai_hat = None
        
        for bai_hat in self.danh_sach_nhac:
            if bai_hat.getMaBaiHat() == id_bai_hat:
                ten_bai_hat = bai_hat.getTieuDe()
                anh_bai_hat = bai_hat.getAnh()
                break
        
        # T·∫°o dialog
        dialog = QDialog(self)
        dialog.setWindowTitle("X√°c nh·∫≠n x√≥a b√†i h√°t")
        dialog.setFixedWidth(400)
        dialog.setStyleSheet("""
            QDialog {
                background-color: white;
            }
            QLabel {
                color: #333333;
            }
            QLabel#title {
                font-weight: bold;
                font-size: 16px;
                color: #d32f2f;
            }
            QPushButton {
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
            }
            QPushButton#delete {
                background-color: #f44336;
                color: white;
            }
            QPushButton#delete:hover {
                background-color: #d32f2f;
            }
            QPushButton#cancel {
                background-color: #e0e0e0;
                color: #333333;
            }
            QPushButton#cancel:hover {
                background-color: #bdbdbd;
            }
        """)
        
        # Layout ch√≠nh
        layout = QVBoxLayout(dialog)
        layout.setSpacing(20)
        
        # Ti√™u ƒë·ªÅ
        title = QLabel("X√°c nh·∫≠n x√≥a")
        title.setObjectName("title")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # N·ªôi dung
        content = QLabel(f'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i h√°t "{ten_bai_hat}" kh·ªèi danh s√°ch ph√°t kh√¥ng?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')
        content.setWordWrap(True)
        content.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(content)
        
        # N√∫t
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)
        
        # N√∫t h·ªßy
        cancel_button = QPushButton("H·ªßy")
        cancel_button.setObjectName("cancel")
        cancel_button.clicked.connect(dialog.reject)
        
        # N√∫t x√≥a
        delete_button = QPushButton("X√≥a")
        delete_button.setObjectName("delete")
        delete_button.clicked.connect(dialog.accept)
        
        button_layout.addWidget(cancel_button)
        button_layout.addWidget(delete_button)
        
        layout.addLayout(button_layout)
        
        # Hi·ªÉn th·ªã dialog v√† x·ª≠ l√Ω k·∫øt qu·∫£
        result = dialog.exec()
        
        if result == QDialog.DialogCode.Accepted:
            print(f"X√°c nh·∫≠n x√≥a b√†i h√°t ID: {id_bai_hat}")
            
            try:
                result = self.bll.xoa_bai_hat_khoi_danh_sach(self.ma_danh_sach, id_bai_hat)
                
                if result:
                    self.danh_sach_nhac = [bh for bh in self.danh_sach_nhac if bh.getMaBaiHat() != id_bai_hat]
                    
                    self.load_danh_sach_bai_hat()
                    
                    QMessageBox.information(
                        self,
                        "X√≥a b√†i h√°t th√†nh c√¥ng",
                        f"ƒê√£ x√≥a b√†i h√°t kh·ªèi danh s√°ch ph√°t.",
                        QMessageBox.StandardButton.Ok
                    )
                else:
                    QMessageBox.warning(
                        self,
                        "X√≥a b√†i h√°t th·∫•t b·∫°i",
                        f"Kh√¥ng th·ªÉ x√≥a b√†i h√°t kh·ªèi danh s√°ch ph√°t. Vui l√≤ng th·ª≠ l·∫°i.",
                        QMessageBox.StandardButton.Ok
                    )
                    
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "L·ªói",
                    f"ƒê√£ x·∫£y ra l·ªói khi x√≥a b√†i h√°t: {str(e)}",
                    QMessageBox.StandardButton.Ok
                )
                print(f"L·ªói khi x√≥a b√†i h√°t: {e}")
        else:
            print(f"H·ªßy x√≥a b√†i h√°t ID: {id_bai_hat}")
        
    def _load_image(self, image_path, width=120, height=120):
        """T·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n, tr·∫£ v·ªÅ QPixmap ƒë√£ ƒë∆∞·ª£c scale"""
        default_image_path = r"assets\DanhSachPhatHeThong\0.png"
        
        if image_path and os.path.exists(image_path.replace("/", "\\")):
            pixmap = QPixmap(image_path.replace("/", "\\"))
            if not pixmap.isNull():
                return pixmap.scaled(width, height, Qt.AspectRatioMode.KeepAspectRatio)
        
        # N·∫øu kh√¥ng c√≥ ·∫£nh ho·∫∑c ·∫£nh kh√¥ng t·∫£i ƒë∆∞·ª£c, s·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh
        default_pixmap = QPixmap(default_image_path)
        if not default_pixmap.isNull():
            return default_pixmap.scaled(width, height, Qt.AspectRatioMode.KeepAspectRatio)
        
        return None  # N·∫øu c·∫£ hai ƒë·ªÅu kh√¥ng t·∫£i ƒë∆∞·ª£c
if __name__ == "__main__":
    import sys
    from PyQt6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    # Kh·ªüi t·∫°o c·ª≠a s·ªï v·ªõi ID m·∫´u (v√≠ d·ª•: 1)
    window = GUIChiTietDanhSachPhatHeThong(1)
    window.show()
    
    sys.exit(app.exec())