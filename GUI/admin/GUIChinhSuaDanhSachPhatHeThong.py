import sys
import os
import shutil
from datetime import datetime, date
from PyQt6.QtWidgets import *
from PyQt6.QtGui import *
from PyQt6.QtCore import Qt, pyqtSignal
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from BLL.BLLQuanLyDanhSachPhatHeThong import BLLQuanLyDanhSachPhatHeThong

class GUIChinhSuaDanhSachPhatHeThong(QDialog):
    dataChanged = pyqtSignal(bool)
    
    def __init__(self, ma_danh_sach=None, parent=None, callback=None):
        super().__init__(parent)
        self.ma_danh_sach = ma_danh_sach
        self.bll = BLLQuanLyDanhSachPhatHeThong()
        self.danh_sach = None
        self.new_image_path = None
        self.is_data_changed = False
        self. callback = callback
        
        # T·∫£i th√¥ng tin danh s√°ch ph√°t
        self.load_danh_sach_phat()
        
        # Thi·∫øt l·∫≠p UI
        self.setupUI()
        
        # ƒêi·ªÅu ch·ªânh c·ª≠a s·ªï
        self.setWindowTitle("üìù Ch·ªânh s·ª≠a Danh s√°ch ph√°t")
        self.setMinimumSize(600, 500)
        self.setModal(True)
        
        # CƒÉn gi·ªØa tr√™n c·ª≠a s·ªï cha (n·∫øu c√≥)
        if parent:
            self.center_on_parent()
    
    def load_danh_sach_phat(self):
        """T·∫£i th√¥ng tin danh s√°ch ph√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu"""
        try:
            if self.ma_danh_sach:
                self.danh_sach = self.bll.lay_danh_sach_phat_he_thong_theo_ma(self.ma_danh_sach)
                if not self.danh_sach:
                    raise Exception(f"Kh√¥ng t√¨m th·∫•y danh s√°ch ph√°t c√≥ m√£ {self.ma_danh_sach}")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin danh s√°ch ph√°t: {str(e)}")
            print(f"L·ªói khi t·∫£i danh s√°ch ph√°t: {e}")
            self.reject()
    
    def setupUI(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Layout ch√≠nh
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        
        # Th√™m ti√™u ƒë·ªÅ
        self.setup_title(main_layout)
        
        # Container cho ·∫£nh v√† th√¥ng tin
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.setSpacing(20)
        
        # Thi·∫øt l·∫≠p panel h√¨nh ·∫£nh (b√™n tr√°i)
        image_panel = self.setup_image_panel()
        content_layout.addWidget(image_panel)
        
        # Thi·∫øt l·∫≠p panel th√¥ng tin (b√™n ph·∫£i)
        info_panel = self.setup_info_panel()
        content_layout.addWidget(info_panel, 1)  # Cho ph√©p info_panel m·ªü r·ªông
        
        main_layout.addWidget(content_widget)
        
        # Th√™m ƒë∆∞·ªùng ph√¢n c√°ch
        self.add_separator(main_layout)
        
        # Th√™m n√∫t ƒëi·ªÅu khi·ªÉn
        self.setup_buttons(main_layout)
    
    def setup_title(self, parent_layout):
        """Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ dialog"""
        title_label = QLabel("üìã Ch·ªânh s·ª≠a th√¥ng tin danh s√°ch ph√°t")
        title_label.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("color: #2196F3; margin-bottom: 10px;")
        parent_layout.addWidget(title_label)
    
    def setup_image_panel(self):
        """Thi·∫øt l·∫≠p panel hi·ªÉn th·ªã v√† qu·∫£n l√Ω ·∫£nh"""
        image_panel = QWidget()
        image_layout = QVBoxLayout(image_panel)
        image_layout.setContentsMargins(0, 0, 0, 0)
        image_layout.setSpacing(10)
        
        # Khung ·∫£nh
        self.image_frame = QLabel()
        self.image_frame.setFixedSize(200, 200)
        self.image_frame.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.image_frame.setStyleSheet("""
            QLabel {
                background-color: #f5f5f5;
                border: 2px dashed #bdbdbd;
                border-radius: 10px;
            }
        """)
        
        # T·∫£i ·∫£nh t·ª´ danh s√°ch ph√°t
        if self.danh_sach and hasattr(self.danh_sach, 'Anh') and self.danh_sach.Anh:
            self.load_image(self.danh_sach.Anh)
        else:
            self.image_frame.setText("Kh√¥ng c√≥ ·∫£nh")
        
        image_layout.addWidget(self.image_frame, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # N√∫t ch·ªçn ·∫£nh
        select_image_button = self.create_button(
            "üñºÔ∏è Ch·ªçn ·∫£nh kh√°c", 
            "#4CAF50", "#388E3C", 
            self.select_image
        )
        image_layout.addWidget(select_image_button)
        
        # N√∫t x√≥a ·∫£nh
        remove_image_button = self.create_button(
            "üóëÔ∏è X√≥a ·∫£nh", 
            "#F44336", "#D32F2F", 
            self.remove_image
        )
        image_layout.addWidget(remove_image_button)
        
        # Th√™m stretch ƒë·ªÉ c√°c n√∫t kh√¥ng b·ªã k√©o gi√£n
        image_layout.addStretch()
        
        return image_panel
    
    def setup_info_panel(self):
        """Thi·∫øt l·∫≠p panel th√¥ng tin danh s√°ch ph√°t"""
        info_panel = QWidget()
        info_layout = QFormLayout(info_panel)
        info_layout.setContentsMargins(0, 0, 0, 0)
        info_layout.setSpacing(15)
        
        # M√£ danh s√°ch (ch·ªâ ƒë·ªçc)
        self.id_field = self.create_read_only_field(
            self.get_danh_sach_attr("MaDanhSach") or self.get_danh_sach_attr("MaDanhSachPhat") or ""
        )
        id_label = self.create_form_label("M√£ danh s√°ch:")
        info_layout.addRow(id_label, self.id_field)
        
        # Ti√™u ƒë·ªÅ
        self.title_field = self.create_edit_field(self.get_danh_sach_attr("TieuDe") or "")
        title_label = self.create_form_label("Ti√™u ƒë·ªÅ:")
        info_layout.addRow(title_label, self.title_field)
        
        # M√¥ t·∫£ (nhi·ªÅu d√≤ng)
        self.desc_field = self.create_text_edit(self.get_danh_sach_attr("MoTa") or "")
        desc_label = self.create_form_label("M√¥ t·∫£:")
        info_layout.addRow(desc_label, self.desc_field)
        
        # Ng√†y t·∫°o (ch·ªâ ƒë·ªçc)
        self.created_date_field = self.create_read_only_field("")
        self.set_formatted_date(self.created_date_field, self.get_danh_sach_attr("NgayTao"))
        created_date_label = self.create_form_label("Ng√†y t·∫°o:")
        info_layout.addRow(created_date_label, self.created_date_field)
        
        # Tr·∫°ng th√°i
        self.status_combo = self.create_status_combo()
        status_label = self.create_form_label("Tr·∫°ng th√°i:")
        info_layout.addRow(status_label, self.status_combo)
        
        return info_panel
    
    def get_danh_sach_attr(self, attr_name):
        """L·∫•y thu·ªôc t√≠nh t·ª´ ƒë·ªëi t∆∞·ª£ng danh s√°ch n·∫øu c√≥"""
        if self.danh_sach and hasattr(self.danh_sach, attr_name):
            return getattr(self.danh_sach, attr_name)
        return None
    
    def create_form_label(self, text):
        """T·∫°o nh√£n cho form"""
        label = QLabel(text)
        label.setFont(QFont("Arial", 12))
        return label
    
    def create_read_only_field(self, text):
        """T·∫°o tr∆∞·ªùng nh·∫≠p li·ªáu ch·ªâ ƒë·ªçc"""
        field = QLineEdit(str(text))
        field.setReadOnly(True)
        field.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }
        """)
        return field
    
    def create_edit_field(self, text):
        """T·∫°o tr∆∞·ªùng nh·∫≠p li·ªáu c√≥ th·ªÉ ch·ªânh s·ª≠a"""
        field = QLineEdit(str(text))
        field.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 1px solid #2196F3;
            }
        """)
        return field
    
    def create_text_edit(self, text):
        """T·∫°o tr∆∞·ªùng vƒÉn b·∫£n nhi·ªÅu d√≤ng"""
        text_edit = QTextEdit(str(text))
        text_edit.setStyleSheet("""
            QTextEdit {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                min-height: 100px;
            }
            QTextEdit:focus {
                border: 1px solid #2196F3;
            }
        """)
        return text_edit
    
    def create_status_combo(self):
        """T·∫°o combobox tr·∫°ng th√°i"""
        combo = QComboBox()
        combo.addItems(["Hi·ªÉn th·ªã", "·∫®n"])
        
        # Thi·∫øt l·∫≠p tr·∫°ng th√°i hi·ªán t·∫°i
        if self.danh_sach and hasattr(self.danh_sach, 'TrangThai'):
            index = 1 if self.danh_sach.TrangThai == 0 else 0
            combo.setCurrentIndex(index)
            
        combo.setStyleSheet("""
            QComboBox {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }
            QComboBox:focus {
                border: 1px solid #2196F3;
            }
        """)
        return combo
    
    def set_formatted_date(self, field, date_value):
        """ƒê·ªãnh d·∫°ng v√† thi·∫øt l·∫≠p gi√° tr·ªã ng√†y th√°ng cho tr∆∞·ªùng nh·∫≠p li·ªáu"""
        formatted_date = self.format_date(date_value)
        field.setText(formatted_date)
    
    def format_date(self, date_value):
        """H√†m tr·ª£ gi√∫p ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y th√°ng t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau"""
        if not date_value:
            return datetime.now().strftime("%d/%m/%Y")
            
        try:
            if isinstance(date_value, str):
                # Th·ª≠ nhi·ªÅu ƒë·ªãnh d·∫°ng chu·ªói kh√°c nhau
                for fmt in ["%Y-%m-%d", "%d/%m/%Y", "%m/%d/%Y", "%Y/%m/%d"]:
                    try:
                        date_obj = datetime.strptime(date_value, fmt)
                        return date_obj.strftime("%d/%m/%Y")
                    except ValueError:
                        continue
                # N·∫øu kh√¥ng ƒë·ªãnh d·∫°ng n√†o kh·ªõp
                return date_value
            
            elif isinstance(date_value, (datetime, date)):
                # N·∫øu ƒë√£ l√† ƒë·ªëi t∆∞·ª£ng date ho·∫∑c datetime
                return date_value.strftime("%d/%m/%Y")
            
            else:
                # Tr∆∞·ªùng h·ª£p kh√°c
                return str(date_value)
        
        except Exception as e:
            print(f"L·ªói khi ƒë·ªãnh d·∫°ng ng√†y: {e}")
            return str(date_value)
    
    def add_separator(self, parent_layout):
        """Th√™m ƒë∆∞·ªùng ph√¢n c√°ch v√†o layout"""
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setStyleSheet("background-color: #e0e0e0;")
        parent_layout.addWidget(separator)
    
    def setup_buttons(self, parent_layout):
        """Thi·∫øt l·∫≠p c√°c n√∫t thao t√°c"""
        button_layout = QHBoxLayout()
        button_layout.setContentsMargins(0, 0, 0, 0)
        button_layout.setSpacing(10)
        
        # N√∫t H·ªßy
        cancel_button = self.create_button(
            "üö´ H·ªßy", 
            "#f44336", "#d32f2f", 
            self.reject,
            True  # font ƒë·∫≠m
        )
        
        # N√∫t L∆∞u
        save_button = self.create_button(
            "üíæ L∆∞u thay ƒë·ªïi", 
            "#2196F3", "#1976D2", 
            self.save_changes,
            True  # font ƒë·∫≠m
        )
        
        button_layout.addStretch(1)
        button_layout.addWidget(cancel_button)
        button_layout.addWidget(save_button)
        
        parent_layout.addLayout(button_layout)
    
    def create_button(self, text, bg_color, hover_color, callback, is_bold=False):
        """T·∫°o n√∫t v·ªõi ki·ªÉu d√°ng nh·∫•t ƒë·ªãnh"""
        button = QPushButton(text)
        font_size = 12
        font = QFont("Arial", font_size)
        if is_bold:
            font.setBold(True)
        button.setFont(font)
        button.setStyleSheet(f"""
            QPushButton {{
                background-color: {bg_color};
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
            }}
            QPushButton:hover {{
                background-color: {hover_color};
            }}
        """)
        button.clicked.connect(callback)
        return button
    
    def load_image(self, image_path):
        """T·∫£i v√† hi·ªÉn th·ªã ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n"""
        if not image_path:
            self.image_frame.setText("Kh√¥ng c√≥ ·∫£nh")
            return
        
        # Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n
        normalized_path = self.normalize_path(image_path)
        
        # T·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n
        pixmap = QPixmap(normalized_path)
        
        if not pixmap.isNull():
            # Thay ƒë·ªïi k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ v·ª´a v·ªõi khung
            pixmap = pixmap.scaled(
                self.image_frame.width() - 10, 
                self.image_frame.height() - 10,
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation
            )
            self.image_frame.setPixmap(pixmap)
        else:
            print(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´: {normalized_path}")
            self.image_frame.setText("Kh√¥ng th·ªÉ t·∫£i ·∫£nh")
    
    def normalize_path(self, image_path):
        """Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n ·∫£nh"""
        if not image_path:
            return None
            
        # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n s·ª≠ d·ª•ng d·∫•u \ tr√™n h·ªá th·ªëng Windows
        normalized_path = image_path.replace("/", "\\")
        
        # X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
        if normalized_path.startswith("\\") or normalized_path.startswith("..") or normalized_path.startswith(".\\") or normalized_path.startswith("./"):
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.dirname(os.path.dirname(current_dir))
            
            if normalized_path.startswith("\\"):
                normalized_path = normalized_path[1:]  
                normalized_path = os.path.normpath(os.path.join(project_root, normalized_path))
            else:
                normalized_path = os.path.normpath(os.path.join(current_dir, normalized_path))
        
        # X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n kh√¥ng c√≥ ph·∫ßn g·ªëc (nh∆∞ assets\DanhSachPhatHeThong\2.png)
        elif not os.path.isabs(normalized_path):
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.dirname(os.path.dirname(current_dir))
            normalized_path = os.path.normpath(os.path.join(project_root, normalized_path))
        
        return normalized_path
    
    def select_image(self):
        """Ch·ªçn ·∫£nh m·ªõi t·ª´ h·ªá th·ªëng t·ªáp"""
        file_dialog = QFileDialog(self)
        file_dialog.setWindowTitle("Ch·ªçn ·∫£nh")
        file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
        file_dialog.setNameFilter("·∫¢nh (*.png *.jpg *.jpeg *.bmp *.gif)")
        
        if file_dialog.exec() == QDialog.DialogCode.Accepted:
            selected_files = file_dialog.selectedFiles()
            if selected_files:
                self.new_image_path = selected_files[0]
                self.load_image(self.new_image_path)
                print(f"ƒê√£ ch·ªçn ·∫£nh: {self.new_image_path}")
    
    def remove_image(self):
        """X√≥a ·∫£nh hi·ªán t·∫°i"""
        self.new_image_path = ""  # ƒê√°nh d·∫•u x√≥a ·∫£nh
        self.image_frame.clear()
        self.image_frame.setText("Kh√¥ng c√≥ ·∫£nh")
        print("ƒê√£ x√≥a ·∫£nh")
    
    def save_changes(self):
        """L∆∞u c√°c thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu"""
        if not self.danh_sach:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu danh s√°ch ph√°t ƒë·ªÉ c·∫≠p nh·∫≠t!")
            return
        
        # Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
        title = self.title_field.text().strip()
        desc = self.desc_field.toPlainText().strip()
        
        if not title:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ danh s√°ch ph√°t!")
            self.title_field.setFocus()
            return
        
        if len(title) > 255:
            QMessageBox.warning(
                self,
                "L·ªói",
                "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±!",
                QMessageBox.StandardButton.Ok
            )
            return
        
        if len(desc) > 255:
            QMessageBox.warning(
                self,
                "L·ªói",
                "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±!",
                QMessageBox.StandardButton.Ok
            )
            return
        
        try:
            # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n n·∫øu c√≥ s·ª± thay ƒë·ªïi ·∫£nh
            if self.new_image_path is not None:
                if self.new_image_path == "":
                    # X√°c nh·∫≠n x√≥a ·∫£nh
                    if not self.confirm_action("X√°c nh·∫≠n x√≥a ·∫£nh", 
                                            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ·∫£nh c·ªßa danh s√°ch ph√°t n√†y?"):
                        return
                else:
                    # X√°c nh·∫≠n thay ƒë·ªïi ·∫£nh
                    existing_image = self.check_existing_image()
                    if existing_image and not self.confirm_action("X√°c nh·∫≠n ghi ƒë√® ·∫£nh", 
                                                                f"·∫¢nh c·ªßa danh s√°ch ph√°t ƒë√£ t·ªìn t·∫°i ({existing_image}).\nB·∫°n c√≥ mu·ªën ghi ƒë√® l√™n ·∫£nh hi·ªán t·∫°i?"):
                        return
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
            update_data = self.prepare_update_data(title, desc)
            
            # X·ª≠ l√Ω ·∫£nh n·∫øu c√≥ s·ª± thay ƒë·ªïi
            self.process_image_update(update_data)
            print(f"K·∫øt qu·∫£ c·∫≠p nh·∫≠t: {update_data}")
            
            # G·ªçi BLL ƒë·ªÉ c·∫≠p nh·∫≠t
            result = self.bll.cap_nhat_danh_sach_phat(update_data)
            
            if result:
                self.handle_save_success()
            else:
                self.handle_save_failure()
                
        except Exception as e:
            self.handle_save_error(e)

    def check_existing_image(self):
        """Ki·ªÉm tra xem ·∫£nh c·ªßa danh s√°ch ph√°t ƒë√£ t·ªìn t·∫°i ch∆∞a"""
        target_dir = os.path.join("assets", "DanhSachPhatHeThong")
        if os.path.exists(target_dir):
            for file in os.listdir(target_dir):
                if file.startswith(str(self.ma_danh_sach) + "."):
                    return file
        return None

    def confirm_action(self, title, message):
        """Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        reply = QMessageBox.question(
            self, title, message,
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        return reply == QMessageBox.StandardButton.Yes

    def prepare_update_data(self, title, desc):
        """Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t"""
        update_data = {
            "MaDanhSachPhatHeThong": self.ma_danh_sach,
            "TieuDe": title,
            "MoTa": desc,
            "TrangThai": 1 if self.status_combo.currentText() == "Hi·ªÉn th·ªã" else 0
        }
        
        # Th√™m ƒë∆∞·ªùng d·∫´n ·∫£nh hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi
        if self.new_image_path is None and self.danh_sach and hasattr(self.danh_sach, 'Anh'):
            current_image = self.danh_sach.Anh
            # Chuy·ªÉn ƒë·ªïi d·∫•u / th√†nh \ n·∫øu ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i s·ª≠ d·ª•ng /
            if current_image and "/" in current_image:
                current_image = current_image.replace("/", "\\")
            update_data["Anh"] = current_image
                
        return update_data
        
    
    def process_image_update(self, update_data):
        """X·ª≠ l√Ω c·∫≠p nh·∫≠t ·∫£nh"""
        # N·∫øu kh√¥ng c√≥ s·ª± thay ƒë·ªïi ·∫£nh, gi·ªØ nguy√™n ·∫£nh hi·ªán t·∫°i
        if self.new_image_path is None:
            if self.danh_sach and hasattr(self.danh_sach, 'Anh'):
                update_data["Anh"] = self.danh_sach.Anh
            return
            
        # N·∫øu x√≥a ·∫£nh
        if self.new_image_path == "":
            update_data["Anh"] = None
            self.remove_existing_image_file()
            return
            
        # N·∫øu c√≥ ·∫£nh m·ªõi
        if os.path.exists(self.new_image_path):
            # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh n·∫øu ch∆∞a t·ªìn t·∫°i
            target_dir = os.path.join("assets", "DanhSachPhatHeThong")
            os.makedirs(target_dir, exist_ok=True)
            
            # L·∫•y ph·∫ßn m·ªü r·ªông c·ªßa file m·ªõi
            _, file_ext = os.path.splitext(self.new_image_path)
            
            # X√≥a c√°c file ·∫£nh c≈© v·ªõi c√πng m√£ danh s√°ch
            self.remove_existing_image_file()
            
            # T·∫°o t√™n file m·ªõi d·ª±a tr√™n m√£ danh s√°ch v√† ƒë·ªãnh d·∫°ng m·ªõi
            new_filename = f"{self.ma_danh_sach}{file_ext}"
            target_path = os.path.join(target_dir, new_filename)
            
            # Sao ch√©p file ·∫£nh m·ªõi v√†o th∆∞ m·ª•c ƒë√≠ch
            print(f"Sao ch√©p ·∫£nh t·ª´ {self.new_image_path} ƒë·∫øn {target_path}")
            shutil.copy2(self.new_image_path, target_path)
            
            # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh trong d·ªØ li·ªáu c·∫≠p nh·∫≠t v·ªõi ƒë·ªãnh d·∫°ng backslash
            db_image_path = f"assets\\DanhSachPhatHeThong\\{self.ma_danh_sach}{file_ext}"
            update_data["Anh"] = db_image_path
            print(f"ƒê∆∞·ªùng d·∫´n ·∫£nh m·ªõi: {update_data['Anh']}")
    
    def remove_existing_image_file(self):
        """X√≥a t·∫•t c·∫£ c√°c file ·∫£nh hi·ªán c√≥ v·ªõi m√£ danh s√°ch n√†y"""
        target_dir = os.path.join("assets", "DanhSachPhatHeThong")
        if os.path.exists(target_dir):
            for file in os.listdir(target_dir):
                # Ki·ªÉm tra n·∫øu file b·∫Øt ƒë·∫ßu b·∫±ng m√£ danh s√°ch
                if file.startswith(str(self.ma_danh_sach) + "."):
                    # ƒê√¢y l√† file ·∫£nh c·ªßa danh s√°ch n√†y
                    file_path = os.path.join(target_dir, file)
                    try:
                        print(f"X√≥a file ·∫£nh c≈©: {file_path}")
                        os.remove(file_path)
                    except Exception as e:
                        print(f"Kh√¥ng th·ªÉ x√≥a file ·∫£nh c≈© {file_path}: {e}")
    
    def handle_save_success(self):
        """X·ª≠ l√Ω khi l∆∞u th√†nh c√¥ng"""
        QMessageBox.information(
            self,
            "Th√†nh c√¥ng",
            "C·∫≠p nh·∫≠t th√¥ng tin danh s√°ch ph√°t th√†nh c√¥ng!",
            QMessageBox.StandardButton.Ok
        )
        
        # ƒê√°nh d·∫•u d·ªØ li·ªáu ƒë√£ thay ƒë·ªïi
        self.is_data_changed = True
        
        # Ph√°t signal tr∆∞·ªõc khi ƒë√≥ng
        self.dataChanged.emit(True)
        
        # ƒê√≥ng dialog
        self.accept()
    
    def handle_save_failure(self):
        """X·ª≠ l√Ω khi l∆∞u th·∫•t b·∫°i"""
        QMessageBox.warning(
            self,
            "Th·∫•t b·∫°i",
            "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin danh s√°ch ph√°t. Vui l√≤ng th·ª≠ l·∫°i!",
            QMessageBox.StandardButton.Ok
        )
    
    def handle_save_error(self, error):
        """X·ª≠ l√Ω khi c√≥ l·ªói trong qu√° tr√¨nh l∆∞u"""
        QMessageBox.critical(
            self,
            "L·ªói",
            f"ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: {str(error)}",
            QMessageBox.StandardButton.Ok
        )
        print(f"L·ªói khi c·∫≠p nh·∫≠t danh s√°ch ph√°t: {error}")
    
    def center_on_parent(self):
        """CƒÉn gi·ªØa dialog so v·ªõi c·ª≠a s·ªï cha ho·∫∑c m√†n h√¨nh"""
        if self.parent():
            # CƒÉn gi·ªØa so v·ªõi parent
            parent_rect = self.parent().geometry()
            x = parent_rect.x() + (parent_rect.width() - self.width()) // 2
            y = parent_rect.y() + (parent_rect.height() - self.height()) // 2
            
            # ƒê·∫£m b·∫£o dialog kh√¥ng ra ngo√†i m√†n h√¨nh
            screen_rect = QApplication.primaryScreen().availableGeometry()
            x = max(screen_rect.left(), min(x, screen_rect.right() - self.width()))
            y = max(screen_rect.top(), min(y, screen_rect.bottom() - self.height()))
            
            self.move(x, y)
        else:
            # CƒÉn gi·ªØa m√†n h√¨nh n·∫øu kh√¥ng c√≥ parent
            self.setGeometry(
                QStyle.alignedRect(
                    Qt.LayoutDirection.LeftToRight,
                    Qt.AlignmentFlag.AlignCenter,
                    self.size(),
                    QApplication.primaryScreen().availableGeometry()
                )
            )


if __name__ == "__main__":
    import sys
    from PyQt6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    # Kh·ªüi t·∫°o dialog v·ªõi ID m·∫´u (v√≠ d·ª•: 1)
    dialog = GUIChinhSuaDanhSachPhatHeThong(1)
    dialog.show()
    
    sys.exit(app.exec())