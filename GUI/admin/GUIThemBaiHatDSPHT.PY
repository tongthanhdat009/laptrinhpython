import sys
import os

from datetime import datetime, date
from PyQt6.QtWidgets import *
from PyQt6.QtGui import *
from PyQt6.QtCore import Qt, pyqtSignal
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from BLL.BLLQuanLyDanhSachPhatHeThong import BLLQuanLyDanhSachPhatHeThong

class GUIThemBaiHatDSPHT(QDialog):
    dataChanged = pyqtSignal(bool)
    
    def __init__(self, ma_danh_sach=None, parent=None):
        super().__init__(parent)
        self.ma_danh_sach = ma_danh_sach
        self.bll = BLLQuanLyDanhSachPhatHeThong()
        self.is_data_changed = False
        self.danh_sach_bai_hat = []
        self.danh_sach_da_chon = []
        
        self.setupUI()
        
        self.loadDanhSachBaiHat()
        self.setupCombobox(self.search_type)

    def setupUI(self):
        # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† k√≠ch th∆∞·ªõc
        self.setWindowTitle("Th√™m b√†i h√°t v√†o Danh s√°ch ph√°t")
        self.setMinimumSize(800, 600)
        
        # Layout ch√≠nh
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # Ti√™u ƒë·ªÅ
        title_label = QLabel("üé∂Th√™m b√†i h√°t v√†o Danh s√°ch ph√°t")
        title_label.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("color: #2196F3; margin-bottom: 20px;")
        main_layout.addWidget(title_label)
        
        # Widget t√¨m ki·∫øm
        search_widget = QWidget()
        search_layout = QHBoxLayout(search_widget)
        search_layout.setContentsMargins(0, 0, 0, 0)
        
        search_label = QLabel("T√¨m ki·∫øm:")
        search_label.setFont(QFont("Arial", 12))
        search_layout.addWidget(search_label)
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Nh·∫≠p t√™n b√†i h√°t ho·∫∑c ca sƒ©...")
        self.search_input.setFont(QFont("Arial", 12))
        self.search_input.textChanged.connect(self.filterDanhSach)
        search_layout.addWidget(self.search_input, 1)  # 1 l√† stretch factor
        
        self.search_type = QComboBox()
        self.search_type.setFont(QFont("Arial", 12))
        self.search_type.setStyleSheet("""
            QComboBox {
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 6px;
                min-width: 120px;
            }
            QComboBox:hover {
                border: 1px solid #2196F3;
            }
            QComboBox::drop-down {
                subcontrol-origin: padding;
                subcontrol-position: center right;
                width: 20px;
            }
            QComboBox QAbstractItemView {
                border: 1px solid #ddd;
                selection-background-color: #2196F3;
                selection-color: white;
            }
        """)
        self.search_type.currentIndexChanged.connect(self.filterDanhSach)
        search_layout.addWidget(self.search_type)
        
        main_layout.addWidget(search_widget)
        
        # B·∫£ng danh s√°ch b√†i h√°t
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["ID", "Ti√™u ƒë·ªÅ", "Ca sƒ©", "Ch·ªçn"])
        
        # Thi·∫øt l·∫≠p thu·ªôc t√≠nh cho b·∫£ng
        self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.SelectionMode.SingleSelection)
        self.table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        
        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ªôt
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # ID
        self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)  # Ti√™u ƒë·ªÅ
        self.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)  # Ca sƒ©
        self.table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)  # Ch·ªçn
        
        
        
        # Thi·∫øt l·∫≠p style cho b·∫£ng
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: #fff;
            }
            QTableWidget::item {
                padding: 8px;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background-color: #2196F3;
                color: white;
                font-weight: bold;
                padding: 8px;
                border: none;
            }
        """)
        
        main_layout.addWidget(self.table)
        
        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn
        self.selection_label = QLabel("ƒê√£ ch·ªçn: 0 b√†i h√°t")
        self.selection_label.setFont(QFont("Arial", 12))
        self.selection_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        main_layout.addWidget(self.selection_label)
        
        # Widget ch·ª©a c√°c n√∫t
        button_widget = QWidget()
        button_layout = QHBoxLayout(button_widget)
        button_layout.setContentsMargins(0, 0, 0, 0)
        button_layout.setSpacing(10)
        
        # N√∫t ch·ªçn t·∫•t c·∫£
        select_all_button = QPushButton("‚úÖCh·ªçn t·∫•t c·∫£")
        select_all_button.setFont(QFont("Arial", 12))
        select_all_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #388E3C;
            }
        """)
        select_all_button.clicked.connect(self.selectAll)
        button_layout.addWidget(select_all_button)
        
        # N√∫t b·ªè ch·ªçn t·∫•t c·∫£
        deselect_all_button = QPushButton("‚ùåB·ªè ch·ªçn t·∫•t c·∫£")
        deselect_all_button.setFont(QFont("Arial", 12))
        deselect_all_button.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        deselect_all_button.clicked.connect(self.deselectAll)
        button_layout.addWidget(deselect_all_button)
        
        # N√∫t th√™m
        add_button = QPushButton("‚ûïTh√™m v√†o danh s√°ch ph√°t")
        add_button.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        add_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        add_button.clicked.connect(self.addSelectedSongs)
        button_layout.addWidget(add_button)
        
        # N√∫t h·ªßy
        cancel_button = QPushButton("üö´H·ªßy")
        cancel_button.setFont(QFont("Arial", 12))
        cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(cancel_button)
        
        main_layout.addWidget(button_widget)
        
        
    def loadDanhSachBaiHat(self):
        # X√≥a d·ªØ li·ªáu c≈©
        self.table.setRowCount(0)
        self.danh_sach_bai_hat = []
        self.danh_sach_da_chon = []
        
        try:
            # L·∫•y danh s√°ch b√†i h√°t ch∆∞a c√≥ trong danh s√°ch ph√°t
            if self.ma_danh_sach:
                self.danh_sach_bai_hat = self.bll.lay_bai_hat_chua_co_trong_danh_sach(self.ma_danh_sach)
            else:
                # N·∫øu kh√¥ng c√≥ m√£ danh s√°ch, l·∫•y t·∫•t c·∫£ b√†i h√°t
                self.danh_sach_bai_hat = self.bll.lay_tat_ca_bai_hat()
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu l√™n b·∫£ng
            self.hienThiDanhSachBaiHat()
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i h√°t: {str(e)}")
            # print(f"L·ªói khi t·∫£i danh s√°ch b√†i h√°t: {e}")
    
    def hienThiDanhSachBaiHat(self, filter_text=""):
        # X√≥a d·ªØ li·ªáu c≈©
        self.table.setRowCount(0)
        # Thi·∫øt l·∫≠p style cho b·∫£ng v·ªõi m√†u n·ªÅn khi ch·ªçn d√≤ng
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: #fff;
                selection-background-color: #4CAF50;  /* M√†u n·ªÅn khi ch·ªçn - m√†u xanh l√° */
                selection-color: white;               /* M√†u ch·ªØ khi ch·ªçn - tr·∫Øng */
            }
            QTableWidget::item:selected {
                background-color: #4CAF50;  /* M√†u n·ªÅn khi ch·ªçn */
                color: white;               /* M√†u ch·ªØ khi ch·ªçn */
            }
            QHeaderView::section {
                background-color: #2196F3;
                color: white;
                font-weight: bold;
                padding: 8px;
                border: none;
            }
        """)
        # L·ªçc danh s√°ch b√†i h√°t n·∫øu c√≥ filter_text
        displayed_songs = []
        for bai_hat in self.danh_sach_bai_hat:
            if filter_text:
                # L·ªçc theo t√™n b√†i h√°t ho·∫∑c ca sƒ©
                tieu_de = bai_hat.getTieuDe().lower()
                ca_si_text = self.getCaSiText(bai_hat).lower()
                
                if filter_text.lower() in tieu_de or filter_text.lower() in ca_si_text:
                    displayed_songs.append(bai_hat)
            else:
                displayed_songs.append(bai_hat)
        
        # ƒêi·ªÅu ch·ªânh s·ªë c·ªôt n·∫øu b·∫°n th√™m c·ªôt ·∫£nh
        self.table.setColumnCount(5)  # TƒÉng l√™n 5 c·ªôt: ID, ·∫¢nh, Ti√™u ƒë·ªÅ, Ca sƒ©, Checkbox
        self.table.setHorizontalHeaderLabels(["ID", "·∫¢nh", "Ti√™u ƒë·ªÅ", "Ca sƒ©", "Ch·ªçn"])
        
        # Thi·∫øt l·∫≠p l·∫°i k√≠ch th∆∞·ªõc c·ªôt
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # ID
        self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)  # ·∫¢nh
        self.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)  # Ti√™u ƒë·ªÅ
        self.table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)  # Ca sƒ©
        self.table.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)  # Checkbox
        
        # Thi·∫øt l·∫≠p chi·ªÅu cao d√≤ng ƒë·ªÉ ph√π h·ª£p v·ªõi ·∫£nh
        self.table.verticalHeader().setDefaultSectionSize(125)  
        
        # Thi·∫øt l·∫≠p s·ªë d√≤ng
        self.table.setRowCount(len(displayed_songs))
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu
        for row, bai_hat in enumerate(displayed_songs):
            # ID
            id_item = QTableWidgetItem(f"#{bai_hat.getMaBaiHat()}")
            id_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            id_item.setFont(QFont("Arial", 10, QFont.Weight.Bold))
            self.table.setItem(row, 0, id_item)
            
            # ·∫¢nh (c·ªôt m·ªõi)
            label = QLabel()
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            # T·∫£i v√† hi·ªÉn th·ªã ·∫£nh
            anh_path = bai_hat.getAnh()
            if anh_path != None:
                image_path = anh_path.replace("/", "\\")
                # print(f"ƒêang t·∫£i ·∫£nh t·ª´: {image_path}")
                
                if image_path.startswith("\\") or image_path.startswith("..") or image_path.startswith(".\\") or image_path.startswith("./"):
                    current_dir = os.path.dirname(os.path.abspath(__file__))
                    project_root = os.path.dirname(os.path.dirname(current_dir))
                    
                    if image_path.startswith("\\"):
                        image_path = image_path[1:]  
                        image_path = os.path.normpath(os.path.join(project_root, image_path))
                    else:
                        image_path = os.path.normpath(os.path.join(current_dir, image_path))
                    # print(f"ƒê∆∞·ªùng d·∫´n ƒë√£ x·ª≠ l√Ω: {image_path}")
                    pixmap = QPixmap(image_path)
                    label.setPixmap(pixmap.scaled(120, 120, Qt.AspectRatioMode.KeepAspectRatio))
                    if pixmap.isNull():
                        # print(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n: {image_path}")
                        self._them_anh_mac_dinh(label)
            else:
                self._them_anh_mac_dinh(label)
            self.table.setCellWidget(row, 1, label)
            
            # Ti√™u ƒë·ªÅ
            tieu_de_item = QTableWidgetItem(bai_hat.getTieuDe())
            tieu_de_item.setFont(QFont("Arial", 11))
            self.table.setItem(row, 2, tieu_de_item)
            
            # Ca sƒ©
            ca_si_text = self.getCaSiText(bai_hat)
            ca_si_item = QTableWidgetItem(ca_si_text)
            ca_si_item.setFont(QFont("Arial", 11))
            self.table.setItem(row, 3, ca_si_item)
            
            # Checkbox
            checkbox_widget = QWidget()
            checkbox_layout = QHBoxLayout(checkbox_widget)
            checkbox_layout.setContentsMargins(5, 5, 5, 5)
            checkbox_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            checkbox = QCheckBox()
            # Ki·ªÉm tra xem b√†i h√°t ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
            if bai_hat.getMaBaiHat() in self.danh_sach_da_chon:
                checkbox.setChecked(True)
            
            # K·∫øt n·ªëi checkbox v·ªõi handler
            checkbox.stateChanged.connect(lambda state, bh=bai_hat: self.onCheckboxChanged(state, bh))
            
            checkbox_layout.addWidget(checkbox)
            self.table.setCellWidget(row, 4, checkbox_widget)
        
        # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng b√†i h√°t
        self.updateSelectionCount()
        
    def _them_anh_mac_dinh(self, label):
        """Th√™m ·∫£nh m·∫∑c ƒë·ªãnh v√†o label"""
        default_image = r"assets\AnhBaiHat\0.png"
        # print(f"S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh: {default_image}")
        pixmap = QPixmap(default_image)
        
        if pixmap.isNull():
            # print(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh m·∫∑c ƒë·ªãnh")
            label.setText("No Image")
        else:
            pixmap = pixmap.scaled(80, 80, Qt.AspectRatioMode.KeepAspectRatio)
            # print(pixmap.size())
            label.setPixmap(pixmap)
    
    def getCaSiText(self, bai_hat):
        """L·∫•y danh s√°ch t√™n ca sƒ© c·ªßa b√†i h√°t"""
        ca_si_names = []
        if bai_hat.getCaSi():
            for ca_si in bai_hat.getCaSi():
                if isinstance(ca_si, dict) and "TenCaSi" in ca_si:
                    ca_si_names.append(ca_si["TenCaSi"])
                elif hasattr(ca_si, "TenCaSi"):
                    ca_si_names.append(ca_si.TenCaSi)
        
        return ", ".join(ca_si_names) if ca_si_names else "Kh√¥ng c√≥ th√¥ng tin"
    
    def updateSelectionCount(self):
        """C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng b√†i h√°t ƒë√£ ch·ªçn"""
        count = len(self.danh_sach_da_chon)
        self.selection_label.setText(f"ƒê√£ ch·ªçn: {count} b√†i h√°t")
    
    def onCheckboxChanged(self, state, bai_hat):
        """X·ª≠ l√Ω khi checkbox thay ƒë·ªïi tr·∫°ng th√°i"""
        ma_bai_hat = bai_hat.getMaBaiHat()
        self.danh_sach_da_chon.append(ma_bai_hat)
        
        if int(state) == 2:
            # Th√™m v√†o danh s√°ch ƒë√£ ch·ªçn n·∫øu ch∆∞a c√≥
            if ma_bai_hat not in self.danh_sach_da_chon:
                self.danh_sach_da_chon.append(ma_bai_hat)
        else:
            # X√≥a kh·ªèi danh s√°ch ƒë√£ ch·ªçn n·∫øu c√≥
            if ma_bai_hat in self.danh_sach_da_chon:
                self.danh_sach_da_chon.remove(ma_bai_hat)
        # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn
        self.updateSelectionCount()
    
    def filterDanhSach(self):
        """L·ªçc danh s√°ch b√†i h√°t theo t·ª´ kh√≥a t√¨m ki·∫øm"""
        filter_text = self.search_input.text().strip()
        self.hienThiDanhSachBaiHat(filter_text)
    
    def selectAll(self):
        """Ch·ªçn t·∫•t c·∫£ b√†i h√°t"""
        # L·∫•y t·∫•t c·∫£ ID b√†i h√°t hi·ªán c√≥
        for bai_hat in self.danh_sach_bai_hat:
            ma_bai_hat = bai_hat.getMaBaiHat()
            if ma_bai_hat not in self.danh_sach_da_chon:
                self.danh_sach_da_chon.append(ma_bai_hat)
        # C·∫≠p nh·∫≠t l·∫°i giao di·ªán
        current_filter = self.search_input.text().strip()
        self.hienThiDanhSachBaiHat(current_filter)
    
    def deselectAll(self):
        # b·ªè ch·ªçn t·∫•t c·∫£
        # L·∫•y t·∫•t c·∫£ ID b√†i h√°t hi·ªán c√≥
        for bai_hat in self.danh_sach_bai_hat:
            ma_bai_hat = bai_hat.getMaBaiHat()
            if ma_bai_hat in self.danh_sach_da_chon:
                self.danh_sach_da_chon.remove(ma_bai_hat)
        # C·∫≠p nh·∫≠t l·∫°i giao di·ªán
        current_filter = self.search_input.text().strip()
        self.hienThiDanhSachBaiHat(current_filter)
                
    def setupCombobox(self, combobox):
        # Th√™m m·ª•c m·∫∑c ƒë·ªãnh - t·∫•t c·∫£ ca sƒ©
        combobox.addItem("T·∫•t c·∫£ ca sƒ©")
        
        # T·∫°o danh s√°ch ca sƒ© kh√¥ng tr√πng l·∫∑p
        ds_ca_si = []
        for bai_hat in self.danh_sach_bai_hat:
            for ca_si in bai_hat.getCaSi():
                if ca_si["TenCaSi"] not in ds_ca_si:
                    ds_ca_si.append(ca_si["TenCaSi"])
        
        # S·∫Øp x·∫øp danh s√°ch ca sƒ© theo th·ª© t·ª± abc
        ds_ca_si.sort()
        
        # Th√™m v√†o combobox
        combobox.addItems(ds_ca_si)
        
        # K·∫øt n·ªëi signal - QUAN TR·ªåNG: S·ª≠ d·ª•ng lambda ƒë·ªÉ truy·ªÅn tham chi·∫øu h√†m
        combobox.currentIndexChanged.connect(lambda: self.filterDanhSachCBB(combobox))

    def filterDanhSachCBB(self, combobox):
        # L·∫•y text hi·ªán t·∫°i c·ªßa combobox
        selected_text = combobox.currentText()
        
        # N·∫øu l√† "T·∫•t c·∫£ ca sƒ©" th√¨ hi·ªÉn th·ªã to√†n b·ªô
        if selected_text == "T·∫•t c·∫£ ca sƒ©":
            self.hienThiDanhSachBaiHat("")
        else:
            # L·ªçc theo ca sƒ© ƒë√£ ch·ªçn
            self.hienThiDanhSachBaiHat(selected_text)
        
        # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
        if selected_text != "T·∫•t c·∫£ ca sƒ©":
            self.setWindowTitle(f"Th√™m b√†i h√°t - L·ªçc theo ca sƒ©: {selected_text}")

    def accept(self):
        if self.is_data_changed:
            self.dataChanged.emit(True)
        super().accept()
    
    def reject(self):
        super().reject()
        
    def addSelectedSongs(self):
        """Th√™m c√°c b√†i h√°t ƒë√£ ch·ªçn v√†o danh s√°ch ph√°t"""
        if not self.ma_danh_sach:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng c√≥ th√¥ng tin danh s√°ch ph√°t!")
            return
        
        if not self.danh_sach_da_chon:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b√†i h√°t!")
            return
        
        try:
            # G·ªçi h√†m t·ª´ BLL ƒë·ªÉ th√™m b√†i h√°t
            success_count, failed_count = self.bll.them_bai_hat_vao_danh_sach(self.ma_danh_sach, self.danh_sach_da_chon)
            
            # Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
            if success_count > 0:
                QMessageBox.information(
                    self,
                    "Th√†nh c√¥ng",
                    f"ƒê√£ th√™m {success_count}/{len(self.danh_sach_da_chon)} b√†i h√°t v√†o danh s√°ch ph√°t."
                )
                
                # ƒê√°nh d·∫•u d·ªØ li·ªáu ƒë√£ thay ƒë·ªïi
                self.is_data_changed = True
                # Ph√°t signal th√¥ng b√°o d·ªØ li·ªáu ƒë√£ thay ƒë·ªïi
                self.dataChanged.emit(True)
                # ƒê√≥ng dialog v·ªõi k·∫øt qu·∫£ l√† Accepted
                self.accept()
            else:
                if failed_count > 0:
                    QMessageBox.warning(
                        self,
                        "Th·∫•t b·∫°i",
                        f"Kh√¥ng th·ªÉ th√™m b√†i h√°t v√†o danh s√°ch ph√°t. {failed_count} b√†i h√°t th·∫•t b·∫°i."
                    )
                else:
                    QMessageBox.information(
                        self,
                        "Th√¥ng b√°o",
                        "Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c th√™m v√†o danh s√°ch ph√°t."
                    )
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"ƒê√£ x·∫£y ra l·ªói khi th√™m b√†i h√°t: {str(e)}")
            print(f"L·ªói khi th√™m b√†i h√°t: {e}")
    
if __name__ == "__main__":
    import sys
    from PyQt6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    # Kh·ªüi t·∫°o c·ª≠a s·ªï v·ªõi ID m·∫´u (v√≠ d·ª•: 1)
    window = GUIThemBaiHatDSPHT(1)
    window.show()
    
    sys.exit(app.exec())