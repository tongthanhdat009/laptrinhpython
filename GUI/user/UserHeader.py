import sys
import os
from PyQt6.QtWidgets import QWidget, QLabel, QHBoxLayout, QLineEdit, QPushButton
from PyQt6.QtCore import Qt, QSize, pyqtSignal
from PyQt6.QtGui import QPixmap, QIcon

# Th√™m d√≤ng n√†y ƒë·ªÉ s·ª≠a l·ªói kh√¥ng t√¨m th·∫•y DTO
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))
from DTO.DTONguoiDung import DTONguoiDung  # Import t·ª´ DTO
from GUI.user.GUITimKiem import GUITimKiem  # Import GUITimKiem
class UserHeader(QWidget):
    search_signal = pyqtSignal(str)  # T·∫°o t√≠n hi·ªáu ƒë·ªÉ truy·ªÅn chu·ªói t√¨m ki·∫øm
    
    def __init__(self, user: DTONguoiDung, switch_callback):
        super().__init__()
        self.setFixedHeight(70)  # ƒê·∫∑t chi·ªÅu cao header l√† 70px
        self.setAttribute(Qt.WidgetAttribute.WA_StyledBackground)  # Bu·ªôc s·ª≠ d·ª•ng m√†u n·ªÅn t·ª´ stylesheet
        self.setStyleSheet("""
            background-color: #ffffff;  /* Explicitly set white background */
            border: none;  /* No border */
            margin: 0;  /* ƒê·∫∑t margin-bottom cho header */
        """)
        self.search_text = ""  # L∆∞u bi·∫øn t√¨m ki·∫øm ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        
        layout = QHBoxLayout(self)  # ƒê·∫∑t layout tr·ª±c ti·∫øp v√†o widget ch√≠nh

        # Thanh t√¨m ki·∫øm v·ªõi icon trong placeholder
        self.search_bar = QLineEdit(self)
        self.search_bar.setPlaceholderText("üîç T√¨m ki·∫øm...")  # S·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng Unicode cho icon t√¨m ki·∫øm
        self.search_bar.setStyleSheet("""
            QLineEdit {
                padding: 10px;
                font-size: 14px;
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                border-radius: 10px;
                color: #333;  /* M√†u ch·ªØ trong thanh t√¨m ki·∫øm */
                margin-left: 100px;  /* Th√™m kho·∫£ng c√°ch b√™n tr√°i */
            }
            QLineEdit:focus {
                border: 2px solid #1db954;  /* Vi·ªÅn xanh l√° khi focus */
                background-color: white;  /* N·ªÅn tr·∫Øng khi focus */
            }
        """)
        self.search_bar.setFixedWidth(600)  # ƒê·∫∑t chi·ªÅu r·ªông cho thanh t√¨m ki·∫øm d√†i h∆°n
        
        # K·∫øt n·ªëi s·ª± ki·ªán returnPressed (nh·∫•n Enter) v·ªõi h√†m x·ª≠ l√Ω t√¨m ki·∫øm
        self.search_bar.returnPressed.connect(self.handle_search)
        
        # Th√™m thanh t√¨m ki·∫øm v√†o layout
        layout.addWidget(self.search_bar)  # Th√™m thanh t√¨m ki·∫øm tr·ª±c ti·∫øp v√†o layout ch√≠nh

        # Layout con ch·ª©a admin button, avatar, v√† t√™n ng∆∞·ªùi d√πng
        user_layout = QHBoxLayout()

        # Ki·ªÉm tra quy·ªÅn n·∫øu l√† admin, hi·ªÉn th·ªã n√∫t admin
        if user.ma_quyen == "admin":  # Gi·∫£ s·ª≠ 'ma_quyen' l√† m√£ quy·ªÅn ng∆∞·ªùi d√πng
            admin_button = QPushButton(self)
            admin_button.setObjectName("adminButton")  # ƒê·∫∑t object name ƒë·ªÉ √°p d·ª•ng CSS
            admin_button.setIcon(QIcon("assets/icon/admin.png"))  # Thay "path_to_admin_icon.png" b·∫±ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn icon admin
            admin_button.setIconSize(QSize(40, 40))  # ƒê·∫∑t k√≠ch th∆∞·ªõc icon nh·ªè h∆°n n√∫t
            admin_button.setFixedSize(60, 60)  # ƒê·∫∑t k√≠ch th∆∞·ªõc n√∫t l√† h√¨nh vu√¥ng (60x60)
            admin_button.setStyleSheet("""
                QPushButton#adminButton {
                    background-color: transparent;
                    border: 2px solid #ddd;  /* Vi·ªÅn x√°m nh·∫°t */
                    border-radius: 30px;  /* N√∫t h√¨nh tr√≤n (b·∫±ng 1/2 k√≠ch th∆∞·ªõc n√∫t) */
                    padding: 0;
                }
                QPushButton#adminButton:hover {
                    background-color: #f0f0f0;  /* Hi·ªáu ·ª©ng hover */
                    border-color: #bbb;  /* ƒê·ªïi m√†u vi·ªÅn khi hover */
                }
            """)
            admin_button.setToolTip("Qu·∫£n tr·ªã vi√™n")  # Tooltip cho n√∫t admin
            admin_button.clicked.connect(lambda: switch_callback("Admin"))  # K·∫øt n·ªëi callback_admin v·ªõi s·ª± ki·ªán click
            user_layout.addWidget(admin_button)  # Th√™m n√∫t admin v√†o layout

        # ·∫¢nh ƒë·∫°i di·ªán ·ªü g√≥c ph·∫£i
        avatar_label = QLabel(self)
        avatar_label.setFixedSize(60, 60)  # ƒê·∫∑t k√≠ch th∆∞·ªõc c·ªßa avatar th√†nh h√¨nh vu√¥ng 60x60
        avatar_label.setAlignment(Qt.AlignmentFlag.AlignCenter)  # CƒÉn gi·ªØa ·∫£nh trong QLabel
        avatar_label.setStyleSheet("""
            border-radius: 30px;  /* Avatar h√¨nh tr√≤n */
            border: 2px solid #ddd;  /* Vi·ªÅn x√°m nh·∫°t */
            background-color: #ffffff;  /* ƒê·∫£m b·∫£o n·ªÅn tr·∫Øng */
        """)

        pixmap = QPixmap(user.anh)  # Assuming 'anh' is the path to the avatar image
        if not pixmap.isNull():
            # Ch·ªânh l·∫°i k√≠ch th∆∞·ªõc ·∫£nh cho v·ª´a v·ªõi khu√¥n h√¨nh tr√≤n
            pixmap = pixmap.scaled(55, 55, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
            avatar_label.setPixmap(pixmap)

        user_layout.addWidget(avatar_label)

        # Th√™m t√™n ng∆∞·ªùi d√πng b√™n ph·∫£i avatar v√† ƒë·∫∑t m√†u ƒëen
        name_label = QLabel(user.ten_nguoi_dung, self)
        name_label.setStyleSheet("""
            font-size: 14px;
            font-weight: bold;
            color: black;  /* ƒê·∫∑t m√†u ch·ªØ t√™n ng∆∞·ªùi d√πng th√†nh ƒëen */
            margin-left: 10px;  /* Th√™m kho·∫£ng c√°ch gi·ªØa t√™n v√† ·∫£nh ƒë·∫°i di·ªán */
        """)

        user_layout.addWidget(name_label)  # Th√™m t√™n ng∆∞·ªùi d√πng v√†o layout

        # D·ªìn layout con n√†y v·ªÅ b√™n ph·∫£i v√† t·∫°o kho·∫£ng c√°ch margin-right 20px
        user_layout.addStretch()
        user_layout.setContentsMargins(0, 0, 20, 0)  # Th√™m kho·∫£ng c√°ch b√™n ph·∫£i 20px

        layout.addStretch()  # ƒê·∫©y to√†n b·ªô v√πng t√¨m ki·∫øm sang b√™n tr√°i
        layout.addLayout(user_layout)  # Th√™m layout con v√†o layout ch√≠nh

        self.setLayout(layout)  # ƒê·∫∑t layout cho to√†n b·ªô widget

    def handle_search(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n Enter trong thanh t√¨m ki·∫øm"""
        self.search_text = self.search_bar.text().strip()  # L·∫•y vƒÉn b·∫£n t·ª´ thanh t√¨m ki·∫øm
    
